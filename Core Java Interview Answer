1. What is casting? What is implicit casting?  What is explicit casting?

byte -> short -> int -> long -> float -> double (assiging value from lower to upper) Implicit

byte <- short <- int <- long <- float <- double (assiging value from lower to upper) Explicit



2.Why should you be careful about String concatenation(+) operator in loops?

The reason is the String immutable. Instead of modifying a string, It creates a new one. String pool stores all String values until garbage collectors flush it.and it takes more memory. Think about two strings are there as Hello and how are you. If we consider the String pool, It has two String. 

Synchhronized vs volartile:


synchronized is method level/block level access restriction modifier. It will make sure that one thread owns the lock for critical section. Only the thread,which own a lock can enter synchronized block. If other threads are trying to access this critical section, they have to wait till current owner releases the lock.
volatile is variable access modifier which forces all threads to get latest value of the variable from main memory. No locking is required to access volatile variables. All threads can access volatile variable value at same time.

A good example to use volatile variable : Date variable.

Assume that you have made Date variable volatile. All the threads, which access this variable always get latest data from main memory so that all threads show real (actual) Date value. You don't need different threads showing different time for same variable. All threads should show right Date value.

3. what is Assertions?

1. Assertion is mainly used for testing of correctness of your assumption that have been made for developement
2. it can be used by assert keyword.

4. IIB(Instance Intialzation Blocks):
a) It is mainly used to intialze variables it is placed just before the constructor and called every time when class intializes.

5. when and how garbage collection performed?

1. it uses two methodds.
a) System.gc().   
b) Runtime.getRuntime.gc()


6. String tokenzer:
it maily used to break the string into tokens.

7. Are the values of static variables stored when an object is serialized?
When we de-serialized an object only, instance variables are saved and will have same values after the process.

Transient variables − The values of the transient variables are never considered (they are excluded from the serialization process). i.e. When we declare a variable transient, after de-serialization its value will always be null, false, or, zero (default value).
Static variables − The values of static variables will not be preserved during the de-serialization process. In-fact static variables are also not serialized but since these belongs to the class. After de-serialization they get their current values from the class.
