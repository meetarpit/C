1. What is casting? What is implicit casting?  What is explicit casting?

byte -> short -> int -> long -> float -> double (assiging value from lower to upper) Implicit

byte <- short <- int <- long <- float <- double (assiging value from lower to upper) Explicit



2.Why should you be careful about String concatenation(+) operator in loops?

The reason is the String immutable. Instead of modifying a string, It creates a new one. String pool stores all String values until garbage collectors flush it.and it takes more memory. Think about two strings are there as Hello and how are you. If we consider the String pool, It has two String. 

Synchhronized vs volartile:


synchronized is method level/block level access restriction modifier. It will make sure that one thread owns the lock for critical section. Only the thread,which own a lock can enter synchronized block. If other threads are trying to access this critical section, they have to wait till current owner releases the lock.
volatile is variable access modifier which forces all threads to get latest value of the variable from main memory. No locking is required to access volatile variables. All threads can access volatile variable value at same time.

A good example to use volatile variable : Date variable.

Assume that you have made Date variable volatile. All the threads, which access this variable always get latest data from main memory so that all threads show real (actual) Date value. You don't need different threads showing different time for same variable. All threads should show right Date value.

3. what is Assertions?

1. Assertion is mainly used for testing of correctness of your assumption that have been made for developement
2. it can be used by assert keyword.

When is the ArrayStoreException thrown?
When copying elements between different arrays, if the source or destination arguments are not arrays or 
their types are not compatible, an ArrayStoreException will be thrown.


4. IIB(Instance Intialzation Blocks):
a) It is mainly used to intialze variables it is placed just before the constructor and called every time when class intializes.

5. when and how garbage collection performed?

1. it uses two methodds.
a) System.gc().   
b) Runtime.getRuntime.gc()


6. String tokenzer:
it maily used to break the string into tokens.

7. Are the values of static variables stored when an object is serialized?
When we de-serialized an object only, instance variables are saved and will have same values after the process.

Transient variables − The values of the transient variables are never 
considered (they are excluded from the serialization process). i.e.
When we declare a variable transient, after de-serialization its value will always be null, false, or, zero (default value).
Static variables − The values of static variables will not be preserved during the de-serialization process. 
In-fact static variables are also not serialized but since these belongs to the class. 
After de-serialization they get their current values from the class.



ExecuterService:

it's a new interface which is mainly used to execute thread it has different method.
ExecuteService ex = Executor.newSingleThreadExecutor();

it  has future that is used to get thread return value, it reurns null if task finished.

it has callable which is used to get thread result.


Set Types:

1. HashSet=> unordered unsorted.
2.Treeset=>sorted ,unorderd.
3.LinkedHashSet=>ordered unsorted.

How many bits are used to represent Unicode, ASCII, UTF-16, and UTF-8 characters?
Unicode requires 16 bits and ASCII require 7 bits. Although the ASCII character set uses only 7 bits,
it is usually represented as 8 bits. UTF-8 represents characters using 8, 16, and 18 bit patterns.
UTF-16 uses 16-bit and larger bit patterns.

Transient Variable
A transient variable is a variable that may not be serialized during Serialization 
and which is initialized by its default value during de-serialization,

Does garbage collection guarantee that a program will not run out of memory?
Garbage collection does not guarantee that a program will not run out of memory. 
It is possible for programs to use up memory resources faster than they are garbage collected. 
It is also possible for programs to create objects that are not subject to garbage collection.

